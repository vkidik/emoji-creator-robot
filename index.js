// index.js
const { Telegraf } = require('telegraf');
const sharp = require('sharp');
const https = require('https');
const { Readable } = require('stream');

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Buffer –≤ ReadableStream
const bufferToStream = (buffer) => {
  return Readable.from(buffer);
};

const bot = new Telegraf('BOT_API_TOKEN');

let botUsername = null;
bot.telegram.getMe()
  .then((me) => {
    botUsername = me.username.toLowerCase();
    console.log(`Bot username: ${botUsername}`);
  })
  .catch(console.error);

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥.
 */
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ URL –∏ –ø–æ–ª—É—á–µ–Ω–∏—è Buffer
 */
const downloadFile = (url) => {
  return new Promise((resolve, reject) => {
    console.log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...');
    https.get(url, (res) => {
      if (res.statusCode !== 200) {
        return reject(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ö–æ–¥: ${res.statusCode}`));
      }
      const data = [];
      res.on('data', (chunk) => data.push(chunk));
      res.on('end', () => {
        console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.');
        resolve(Buffer.concat(data));
      });
    }).on('error', (err) => reject(err));
  });
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç—ã 100x100.
 * –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –∫—Ä–∞—Ç–Ω—ã 100 ‚Äì –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç: { squares, cols, rows, newWidth, newHeight }
 */
const splitImageToSquares = async (buffer) => {
  console.log('–ù–∞—á–∞–ª–æ –Ω–∞—Ä–µ–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞
  const image = sharp(buffer).ensureAlpha();
  const metadata = await image.metadata();
  const originalWidth = metadata.width;
  const originalHeight = metadata.height;

  const newWidth = Math.ceil(originalWidth / 100) * 100;
  const newHeight = Math.ceil(originalHeight / 100) * 100;

  let paddedImage = image;
  if (newWidth !== originalWidth || newHeight !== originalHeight) {
    paddedImage = image.extend({
      right: newWidth - originalWidth,
      bottom: newHeight - originalHeight,
      background: { r: 0, g: 0, b: 0, alpha: 0 }
    }).ensureAlpha();
    console.log(`–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω: ${newWidth - originalWidth}px —Å–ø—Ä–∞–≤–∞, ${newHeight - originalHeight}px —Å–Ω–∏–∑—É.`);
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
  const paddedBuffer = await paddedImage.png().toBuffer();
  const cols = newWidth / 100;
  const rows = newHeight / 100;
  const squares = [];

  for (let y = 0; y < rows; y++) {
    for (let x = 0; x < cols; x++) {
      const left = x * 100;
      const top = y * 100;
      const squareBuffer = await sharp(paddedBuffer)
        .extract({ left, top, width: 100, height: 100 })
        .toBuffer();
      squares.push(squareBuffer);
    }
  }
  console.log(`–ù–∞—Ä–µ–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø–æ–ª—É—á–µ–Ω–æ ${squares.length} –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ (${cols} –∫–æ–ª–æ–Ω–æ–∫, ${rows} —Å—Ç—Ä–æ–∫).`);
  return { squares, cols, rows, newWidth, newHeight };
};

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç PNG (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —ç–º–æ–¥–∑–∏)
 */
const convertToPng = async (buffer) => {
  return sharp(buffer)
    .png()
    .toBuffer();
};

// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö
bot.start((ctx) =>
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞).\n\n' +
    '–í–∞–∂–Ω–æ: –≠–º–æ–¥–∑–∏ –ø–∞–∫ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–æ–≤–Ω–æ 200 —Å—Ç–∏–∫–µ—Ä–æ–≤ (–∫–∞–∂–¥—ã–π 100x100 –ø–∏–∫—Å–µ–ª–µ–π). ' +
    '–ï—Å–ª–∏ –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω–æ –±–æ–ª—å—à–µ –∏–ª–∏ –º–µ–Ω—å—à–µ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.'
  )
);

bot.on('photo', async (ctx) => {
  try {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    if (!botUsername) {
      await ctx.reply('–ë–æ—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.');
      return;
    }
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞ –∏–∑ –ø–æ–¥–ø–∏—Å–∏ –∏–ª–∏ –∑–∞–¥–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const packTitle = ctx.message.caption || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const userUsername = ctx.from.username ? ctx.from.username : ctx.from.first_name;
    // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    const displayTitle = `@${userUsername} ${packTitle} | –°–æ–∑–¥–∞–Ω–æ: @${botUsername}`;

    // await ctx.reply(`–°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏ –ø–∞–∫: ${displayTitle}`);
    console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞: ${displayTitle}`);

    // –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    const photoSizes = ctx.message.photo;
    const highestResPhoto = photoSizes[photoSizes.length - 1];
    const fileId = highestResPhoto.file_id;

    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const fileLink = await ctx.telegram.getFileLink(fileId);
    const imageBuffer = await downloadFile(fileLink.href);

    // –ù–∞—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç—ã 100x100
    const { squares, cols, rows } = await splitImageToSquares(imageBuffer);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–æ—Å—å –ª–∏ <= 200 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
    if (squares.length > 200) {
      await ctx.reply(
        `–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ ${squares.length} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤. ` +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ—Å–ª–µ –Ω–∞—Ä–µ–∑–∫–∏ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç—ã 100√ó100 –¥–∞—Å—Ç –º–µ–Ω—å—à–µ 200 —ç–ª–µ–º–µ–Ω—Ç–æ–≤. ' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2000√ó1000 –ø–∏–∫—Å–µ–ª–µ–π (20 –∫–æ–ª–æ–Ω–æ–∫ x 10 —Å—Ç—Ä–æ–∫).'
      );
      return;
    }

    console.log('–ù–∞—á–∞–ª–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤ –≤ PNG...');
    // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
    const stickersPng = await Promise.all(squares.map(square => convertToPng(square)));
    console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

    const userId = ctx.from.id;
    const uniquePart = Date.now();
    // –ò–º—è –Ω–∞–±–æ—Ä–∞: –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –º–∞–ª–µ–Ω—å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ _by_<botUsername>
    let setName = `emoji_${userId}_${uniquePart}_by_${botUsername}`;
    if (setName.length > 64) {
      setName = setName.substring(0, 63);
    }
    console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –Ω–∞–±–æ—Ä–∞: ${setName}`);

    console.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∏–∫–µ—Ä –ø–∞–∫–∞...');
    // –°–æ–∑–¥–∞—ë–º –Ω–∞–±–æ—Ä —Å –ø–µ—Ä–≤—ã–º —Å—Ç–∏–∫–µ—Ä–æ–º
    const firstStickerBuffer = stickersPng.shift();
    await ctx.telegram.createNewStickerSet(
      userId,
      setName,
      displayTitle,
      {
        png_sticker: { source: bufferToStream(firstStickerBuffer), filename: 'sticker.png' },
        sticker_format: 'static',
        sticker_type: 'custom_emoji',
        emojis: "üß©"
      }
    );
    console.log('–°—Ç–∏–∫–µ—Ä –ø–∞–∫ —Å–æ–∑–¥–∞–Ω.');

    // –§—É–Ω–∫—Ü–∏—è-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ 429
    async function addStickerToSetWithRetry(userId, setName, payload, attempt = 0) {
      try {
        return await ctx.telegram.addStickerToSet(userId, setName, payload);
      } catch (error) {
        if (error.response && error.response.error_code === 429 && attempt < 5) {
          let waitTime = error.response.parameters.retry_after || 3;
          console.log(`Rate limit hit. Retrying after ${waitTime} seconds...`);
          await sleep(waitTime * 1000);
          return await addStickerToSetWithRetry(userId, setName, payload, attempt + 1);
        } else {
          throw error;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç–∏–∫–µ—Ä—ã –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ 10 —à—Ç—É–∫
    console.log('–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–∞–∫–µ—Ç–∞–º–∏...');
    const batchSize = 10;
    for (let i = 0; i < stickersPng.length; i += batchSize) {
      const batch = stickersPng.slice(i, i + batchSize);
      await Promise.all(batch.map(async (pngBuffer) => {
        const payload = {
          png_sticker: { source: bufferToStream(pngBuffer), filename: 'sticker.png' },
          sticker_format: 'static',
          sticker_type: 'custom_emoji',
          emojis: "üß©"
        };
        return addStickerToSetWithRetry(userId, setName, payload);
      }));
      console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤ ${i + 1} - ${Math.min(i + batchSize, stickersPng.length)}`);
    }
    console.log('–í—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–∫–µ—Ä –ø–∞–∫
    const stickerPackLink = `https://t.me/addstickers/${setName}`;
    console.log(`–°—Ç–∏–∫–µ—Ä –ø–∞–∫ —Å–æ–∑–¥–∞–Ω: ${stickerPackLink}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –Ω–∞–±–æ—Ä
    await ctx.reply(`–≠–º–æ–¥–∑–∏ –ø–∞–∫ "${displayTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–°—Å—ã–ª–∫–∞: ${stickerPackLink}`);

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–±–æ—Ä–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä—ã –≤ –≤–∏–¥–µ –≥—Ä–∏–¥–∞
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–±–æ—Ä–µ —Å—Ç–∏–∫–µ—Ä–æ–≤...');
    const stickerSet = await ctx.telegram.getStickerSet(setName);
    const stickers = stickerSet.stickers;
    
    if (!stickers || stickers.length === 0) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ.');
      return;
    }
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: ${stickers.length}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä—ã –≥—Ä—É–ø–ø–∞–º–∏.`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ —Ä—è–¥–∞–º–∏ (–ø–æ cols —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏)
    for (let r = 0; r < rows; r++) {
      for (let c = 0; c < cols; c++) {
        const index = r * cols + c;
        if (index < stickers.length) {
          await ctx.telegram.sendSticker(ctx.chat.id, stickers[index].file_id);
        }
      }
      // –ó–∞–¥–µ—Ä–∂–∫–∞ 500 –º—Å –º–µ–∂–¥—É —Ä—è–¥–∞–º–∏
      await sleep(500);
    }
    console.log('–°—Ç–∏–∫–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.');

  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏ –ø–∞–∫–∞:', err);
    // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–∞–∫–∂–µ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await ctx.reply(
      `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–º–æ–¥–∑–∏ –ø–∞–∫–∞: ${err.message}\n`
    );
  }
});

bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
