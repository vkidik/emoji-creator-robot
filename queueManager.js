// queueManager.js
const { downloadFile, resizeTo8Cols, splitImageToSquares, convertToPng } = require('./imageProcessor');
const { sleep } = require('./utils');  // –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é sleep –≤ utils.js –∏–ª–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å

// –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π
class JobQueue {
  constructor() {
    this.queue = [];
    this.running = false;
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
    setInterval(() => this.updateWaitingJobs(), 2000);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
  async addJob(job) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
    const position = this.queue.length + 1; // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    try {
      job.progressMessage = await job.ctx.reply(`–í–∞—à–µ —Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å. –ú–µ—Å—Ç–æ: ${position}`);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–∑–∏—Ü–∏–∏:', err.message);
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
    this.queue.push(job);
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if (!this.running) {
      this.run();
    }
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
  async updateWaitingJobs() {
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–≥–æ) –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    for (let i = 0; i < this.queue.length; i++) {
      const job = this.queue[i];
      if (job.progressMessage) {
        const newText = `–í–∞—à–µ —Ñ–æ—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏. –ú–µ—Å—Ç–æ: ${i + 1} –∏–∑ ${this.queue.length}`;
        try {
          await job.ctx.telegram.editMessageText(
            job.ctx.chat.id,
            job.progressMessage.message_id,
            undefined,
            newText
          );
        } catch (err) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ/—É–¥–∞–ª–µ–Ω–æ
        }
      }
    }
  }

  // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞–Ω–∏–π
  async run() {
    this.running = true;
    while (this.queue.length) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ (FIFO)
      const job = this.queue.shift();
      // –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
      let progressInterval = null;
      const startTime = Date.now();
      try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:
        job.progressMessage = await job.ctx.telegram.editMessageText(
          job.ctx.chat.id,
          job.progressMessage.message_id,
          undefined,
          `–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ...`
        );

        progressInterval = setInterval(async () => {
          const elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);
          const text = `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ... (${elapsedSeconds} —Å–µ–∫ –ø—Ä–æ—à–ª–æ)`;
          try {
            await job.ctx.telegram.editMessageText(
              job.ctx.chat.id,
              job.progressMessage.message_id,
              undefined,
              text
            );
          } catch (e) {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }
        }, 1500);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ (–æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ processPhotoJob)
        await processPhotoJob(job);
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è:', err);
        try {
          await job.ctx.telegram.editMessageText(
            job.ctx.chat.id,
            job.progressMessage.message_id,
            undefined,
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.'
          );
        } catch (e) { }
      } finally {
        if (progressInterval) clearInterval(progressInterval);
      }
    }
    this.running = false;
  }
}

const jobQueue = new JobQueue();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async function processPhotoJob(job) {
  const ctx = job.ctx;
  console.log(`–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${job.userId}`);
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–∫–∞, —Ñ–æ—Ä–º–∏—Ä—É–µ–º displayTitle
  const packTitle = job.caption;
  const userUsername = ctx.from.username || ctx.from.first_name;
  const displayTitle = `@${userUsername} ${packTitle} | –°–æ–∑–¥–∞–Ω–æ: @${job.botUsername}`;

  // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
  const fileLink = await ctx.telegram.getFileLink(job.fileId);
  // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
  const imageBuffer = await downloadFile(fileLink.href);
  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const resizedBuffer = await resizeTo8Cols(imageBuffer);
  // –ù–∞—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç—ã 100x100
  const { squares, cols, rows } = await splitImageToSquares(resizedBuffer);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤
  if (squares.length > 200) {
    await ctx.telegram.editMessageText(
      ctx.chat.id,
      job.progressMessage.message_id,
      undefined,
      `–û—à–∏–±–∫–∞: –ø–æ–ª—É—á–µ–Ω–æ ${squares.length} –∫–≤–∞–¥—Ä–∞—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –Ω–µ –±–æ–ª–µ–µ 200 —Å—Ç–∏–∫–µ—Ä–∞–º–∏.`
    );
    return;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç—ã –≤ PNG
  console.log('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PNG...');
  const stickersPng = await Promise.all(squares.map(square => convertToPng(square)));
  console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');

  // –°–æ–∑–¥–∞—ë–º –∏–º—è —Å—Ç–∏–∫–µ—Ä–ø–∞–∫–∞
  const userId = ctx.from.id;
  const uniquePart = Date.now();
  let setName = `emoji_${userId}_${uniquePart}_by_${job.botUsername}`;
  if (setName.length > 64) {
    setName = setName.substring(0, 63);
  }
  console.log(`–ò–º—è –Ω–∞–±–æ—Ä–∞: ${setName}`);

  // –°–æ–∑–¥–∞—ë–º —Å—Ç–∏–∫–µ—Ä –ø–∞–∫ (–ø–µ—Ä–≤—ã–π —Å—Ç–∏–∫–µ—Ä)
  const firstStickerBuffer = stickersPng.shift();
  await ctx.telegram.createNewStickerSet(
    userId,
    setName,
    displayTitle,
    {
      png_sticker: { source: firstStickerBuffer, filename: 'sticker.png' },
      sticker_format: 'static',
      sticker_type: 'custom_emoji',
      emojis: "üß©"
    }
  );
  console.log('–°—Ç–∏–∫–µ—Ä –ø–∞–∫ —Å–æ–∑–¥–∞–Ω.');

  // –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ 429)
  async function addStickerToSetWithRetry(stickerBuffer, attempt = 0) {
    const payload = {
      png_sticker: { source: stickerBuffer, filename: 'sticker.png' },
      sticker_format: 'static',
      sticker_type: 'custom_emoji',
      emojis: "üß©"
    };
    try {
      return await ctx.telegram.addStickerToSet(userId, setName, payload);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞, –ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}:`, error.message);
      if (error.response && error.response.error_code === 429 && attempt < 5) {
        const waitTime = error.response.parameters.retry_after || 1;
        console.log(`Rate limit. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${waitTime} —Å–µ–∫—É–Ω–¥...`);
        await sleep(waitTime * 1000);
        return await addStickerToSetWithRetry(stickerBuffer, attempt + 1);
      } else {
        throw error;
      }
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç–∏–∫–µ—Ä—ã –ø–æ –≥—Ä—É–ø–ø–∞–º (—Å—Ç—Ä–æ–∫–∞–º–∏ –ø–æ 8 —Å—Ç–∏–∫–µ—Ä–æ–≤)
  console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å—Ç–∏–∫–µ—Ä–æ–≤...');
  let currentIndex = 0;
  while (currentIndex < stickersPng.length) {
    const group = stickersPng.slice(currentIndex, currentIndex + cols);
    for (let j = 0; j < group.length; j++) {
      try {
        await addStickerToSetWithRetry(group[j]);
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞ (–ø–æ–∑–∏—Ü–∏—è ${j + 1} –≤ –≥—Ä—É–ø–ø–µ):`, err.message);
      }
      await sleep(800);
    }
    currentIndex += group.length;
  }
  console.log('–í—Å–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã.');

  // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º custom_emoji_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  const stickerSet = await ctx.telegram.getStickerSet(setName);
  const orderedEmojiIds = stickerSet.stickers.map(sticker => sticker.custom_emoji_id);
  console.log('–ü–æ—Ä—è–¥–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω.');

  const stickerPackLink = `https://t.me/addstickers/${setName}`;
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    job.progressMessage.message_id,
    undefined,
    `–≠–º–æ–¥–∑–∏ –ø–∞–∫ "${displayTitle}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–°—Å—ã–ª–∫–∞: ${stickerPackLink}\n–°—Ç–∏–∫–µ—Ä—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.`
  );

  // –ñ–¥—ë–º –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  const userClient = await require('./userClient');
  const targetUsername = '@' + (ctx.from.username || ctx.from.first_name);
  let messageStr = "";
  for (let r = 0; r < rows; r++) {
    let rowStr = "";
    for (let c = 0; c < cols; c++) {
      const index = r * cols + c;
      if (!orderedEmojiIds[index]) continue;
      rowStr += `<tg-emoji emoji-id="${orderedEmojiIds[index]}">üß©</tg-emoji>`;
    }
    messageStr += rowStr + "\n";
  }
  await userClient.sendMessage(targetUsername, { message: messageStr });
  console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
}

module.exports = { jobQueue, processPhotoJob };
